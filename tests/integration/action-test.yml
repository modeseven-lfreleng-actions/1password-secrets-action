---
# SPDX-License-Identifier: Apache-2.0
# SPDX-FileCopyrightText: 2025 The Linux Foundation

name: Action Integration Test
"on":
  workflow_dispatch:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  test-single-secret:
    name: Test Single Secret Retrieval
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Test single secret
        id: single-secret
        uses: ./
        with:
          token: ${{ secrets.OP_SERVICE_ACCOUNT_TOKEN }}
          vault: Test Vault
          record: Testing/password

      - name: Validate single secret output
        run: |
          if [ -z "${{ steps.single-secret.outputs.value }}" ]; then
            echo "Error: Single secret value is empty"
            exit 1
          fi
          echo "✅ Single secret retrieved successfully"

  test-multiple-secrets:
    name: Test Multiple Secrets Retrieval
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Test multiple secrets (JSON)
        id: multiple-json
        uses: ./
        with:
          token: ${{ secrets.OP_SERVICE_ACCOUNT_TOKEN }}
          vault: Test Vault
          record: |
            {
              "username": "Testing/username",
              "password": "Testing/password"
            }

      - name: Validate JSON multiple secrets
        run: |
          if [ -z "${{ steps.multiple-json.outputs.username }}" ] || \
             [ -z "${{ steps.multiple-json.outputs.password }}" ] || \
             [ -z "${{ steps.multiple-json.outputs.api_key }}" ]; then
            echo "Error: Some JSON secrets are missing"
            exit 1
          fi
          if [ "${{ steps.multiple-json.outputs.secrets_count }}" != "3" ]; then
            echo "Error: Expected 3 secrets, got" \
              "${{ steps.multiple-json.outputs.secrets_count }}"
            exit 1
          fi
          echo "✅ JSON multiple secrets retrieved successfully"

      - name: Test multiple secrets (YAML)
        id: multiple-yaml
        uses: ./
        with:
          token: ${{ secrets.OP_SERVICE_ACCOUNT_TOKEN }}
          vault: Test Vault
          record: |
            db_user: Testing/username
            db_pass: Testing/password

      - name: Validate YAML multiple secrets
        run: |
          if [ -z "${{ steps.multiple-yaml.outputs.db_user }}" ] || \
             [ -z "${{ steps.multiple-yaml.outputs.db_pass }}" ]; then
            echo "Error: Some YAML secrets are missing"
            exit 1
          fi
          if [ "${{ steps.multiple-yaml.outputs.secrets_count }}" != "2" ]; then
            echo "Error: Expected 2 secrets, got" \
              "${{ steps.multiple-yaml.outputs.secrets_count }}"
            exit 1
          fi
          echo "✅ YAML multiple secrets retrieved successfully"

  test-return-types:
    name: Test Different Return Types
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Test output mode
        id: output-mode
        uses: ./
        with:
          token: ${{ secrets.OP_SERVICE_ACCOUNT_TOKEN }}
          vault: Test Vault
          record: Testing/username
          return_type: output

      - name: Validate output mode
        run: |
          if [ -z "${{ steps.output-mode.outputs.value }}" ]; then
            echo "Error: Output mode value is empty"
            exit 1
          fi
          echo "✅ Output mode working"

      - name: Test environment mode
        id: env-mode
        uses: ./
        with:
          token: ${{ secrets.OP_SERVICE_ACCOUNT_TOKEN }}
          vault: Test Vault
          record: Testing/username
          return_type: env

      - name: Validate environment mode
        run: |
          if [ -z "${TEST_LOGIN_USERNAME:-}" ]; then
            echo "Error: Environment variable not set"
            exit 1
          fi
          echo "✅ Environment mode working"

      - name: Test both modes
        id: both-mode
        uses: ./
        with:
          token: ${{ secrets.OP_SERVICE_ACCOUNT_TOKEN }}
          vault: Test Vault
          record: Testing/password
          return_type: both

      - name: Validate both modes
        run: |
          if [ -z "${{ steps.both-mode.outputs.value }}" ]; then
            echo "Error: Both mode output value is empty"
            exit 1
          fi
          if [ -z "${TEST_API_KEY_CREDENTIAL:-}" ]; then
            echo "Error: Both mode environment variable not set"
            exit 1
          fi
          echo "✅ Both modes working"

  test-vault-resolution:
    name: Test Vault Resolution
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Test vault by name
        id: vault-name
        uses: ./
        with:
          token: ${{ secrets.OP_SERVICE_ACCOUNT_TOKEN }}
          vault: Test Vault
          record: Testing/password

      - name: Validate vault by name
        run: |
          if [ -z "${{ steps.vault-name.outputs.value }}" ]; then
            echo "Error: Vault resolution by name failed"
            exit 1
          fi
          echo "✅ Vault resolution by name working"

  test-error-handling:
    name: Test Error Handling
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Test invalid token
        id: invalid-token
        uses: ./
        with:
          token: invalid-token-format
          vault: Test Vault
          record: Testing/password
        continue-on-error: true

      - name: Validate invalid token error
        run: |
          if [ "${{ steps.invalid-token.outcome }}" != "failure" ]; then
            echo "Error: Should have failed with invalid token"
            exit 1
          fi
          echo "✅ Invalid token properly rejected"

      - name: Test nonexistent vault
        id: invalid-vault
        uses: ./
        with:
          token: ${{ secrets.OP_SERVICE_ACCOUNT_TOKEN }}
          vault: NonExistentVault12345
          record: Testing/password
        continue-on-error: true

      - name: Validate vault error
        run: |
          if [ "${{ steps.invalid-vault.outcome }}" != "failure" ]; then
            echo "Error: Should have failed with nonexistent vault"
            exit 1
          fi
          echo "✅ Nonexistent vault properly rejected"

      - name: Test nonexistent secret
        id: invalid-secret
        uses: ./
        with:
          token: ${{ secrets.OP_SERVICE_ACCOUNT_TOKEN }}
          vault: Test Vault
          record: nonexistent-secret/field
        continue-on-error: true

      - name: Validate secret error
        run: |
          if [ "${{ steps.invalid-secret.outcome }}" != "failure" ]; then
            echo "Error: Should have failed with nonexistent secret"
            exit 1
          fi
          echo "✅ Nonexistent secret properly rejected"

      - name: Test invalid record format
        id: invalid-format
        uses: ./
        with:
          token: ${{ secrets.OP_SERVICE_ACCOUNT_TOKEN }}
          vault: Test Vault
          record: invalid-format-no-slash
        continue-on-error: true

      - name: Validate format error
        run: |
          if [ "${{ steps.invalid-format.outcome }}" != "failure" ]; then
            echo "Error: Should have failed with invalid record format"
            exit 1
          fi
          echo "✅ Invalid record format properly rejected"

      - name: Test malformed JSON
        id: malformed-json
        uses: ./
        with:
          token: ${{ secrets.OP_SERVICE_ACCOUNT_TOKEN }}
          vault: Test Vault
          record: '{"invalid": "json"'
        continue-on-error: true

      - name: Validate JSON error
        run: |
          if [ "${{ steps.malformed-json.outcome }}" != "failure" ]; then
            echo "Error: Should have failed with malformed JSON"
            exit 1
          fi
          echo "✅ Malformed JSON properly rejected"

  test-security-features:
    name: Test Security Features
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Test secret masking
        id: secret-mask
        uses: ./
        with:
          token: ${{ secrets.OP_SERVICE_ACCOUNT_TOKEN }}
          vault: Test Vault
          record: Testing/password

      - name: Verify masking hints generated
        run: |
          # In a real scenario, we would check that ::add-mask:: commands
          # were issued
          # This is a placeholder for that verification
          echo "✅ Secret masking verification (implementation-specific)"

      - name: Test large secret handling
        id: large-secret
        uses: ./
        with:
          token: ${{ secrets.OP_SERVICE_ACCOUNT_TOKEN }}
          vault: Test Vault
          record: Testing/password

      - name: Validate large secret limits
        run: |
          secret_length=${#"${{ steps.large-secret.outputs.value }}"}
          max_length=10485760  # 10MB
          if [ $secret_length -gt $max_length ]; then
            echo "Error: Secret exceeds size limit"
            exit 1
          fi
          echo "✅ Secret size within limits ($secret_length bytes)"

  test-concurrent-access:
    name: Test Concurrent Access
    runs-on: ubuntu-latest
    strategy:
      matrix:
        instance: [1, 2, 3, 4, 5]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Concurrent secret retrieval
        id: concurrent
        uses: ./
        with:
          token: ${{ secrets.OP_SERVICE_ACCOUNT_TOKEN }}
          vault: Test Vault
          record: Testing/password

      - name: Validate concurrent access
        run: |
          if [ -z "${{ steps.concurrent.outputs.value }}" ]; then
            echo "Error: Concurrent access failed for instance" \
              "${{ matrix.instance }}"
            exit 1
          fi
          echo "✅ Concurrent access successful for instance" \
            "${{ matrix.instance }}"

  test-complex-workflows:
    name: Test Complex Workflows
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Step 1 - Get database credentials
        id: db-creds
        uses: ./
        with:
          token: ${{ secrets.OP_SERVICE_ACCOUNT_TOKEN }}
          vault: Test Vault
          record: |
            {
              "db_host": "Testing/username",
              "db_user": "Testing/username",
              "db_pass": "Testing/password"
            }
          return_type: env

      - name: Step 2 - Simulate database connection
        run: |
          echo "Connecting to database:"
          echo "Host: ${DB_HOST}"
          echo "User: ${DB_USER}"
          echo "Password: [MASKED]"

          # Verify all credentials are available
          if [ -z "${DB_HOST}" ] || [ -z "${DB_USER}" ] || [ -z "${DB_PASS}" ]; then
            echo "Error: Missing database credentials"
            exit 1
          fi
          echo "✅ Database credentials available"

      - name: Step 3 - Get API credentials
        id: api-creds
        uses: ./
        with:
          token: ${{ secrets.OP_SERVICE_ACCOUNT_TOKEN }}
          vault: Test Vault
          record: Testing/password

      - name: Step 4 - Simulate API call
        run: |
          api_key="${{ steps.api-creds.outputs.value }}"
          if [ -z "$api_key" ]; then
            echo "Error: API key not retrieved"
            exit 1
          fi

          echo "Making API call with key: [MASKED]"
          echo "✅ API credentials available"

      - name: Step 5 - Complex multi-secret operation
        id: complex
        uses: ./
        with:
          token: ${{ secrets.OP_SERVICE_ACCOUNT_TOKEN }}
          vault: Test Vault
          record: |
            {
              "service_account": "Testing/username",
              "service_password": "Testing/password",
              "backup_key": "Testing/password",
              "admin_token": "Testing/password"
            }
          return_type: both

      - name: Step 6 - Validate complex operation
        run: |
          # Check outputs
          if [ -z "${{ steps.complex.outputs.service_account }}" ] || \
             [ -z "${{ steps.complex.outputs.service_password }}" ] || \
             [ -z "${{ steps.complex.outputs.backup_key }}" ] || \
             [ -z "${{ steps.complex.outputs.admin_token }}" ]; then
            echo "Error: Missing outputs from complex operation"
            exit 1
          fi

          # Check environment variables
          if [ -z "${SERVICE_ACCOUNT}" ] || \
             [ -z "${SERVICE_PASSWORD}" ] || \
             [ -z "${BACKUP_KEY}" ] || \
             [ -z "${ADMIN_TOKEN}" ]; then
            echo "Error: Missing environment variables from complex operation"
            exit 1
          fi

          # Check secret count
          if [ "${{ steps.complex.outputs.secrets_count }}" != "4" ]; then
            echo "Error: Expected 4 secrets, got ${{ steps.complex.outputs.secrets_count }}"
            exit 1
          fi

          echo "✅ Complex multi-secret operation successful"

  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs:
      - test-single-secret
      - test-multiple-secrets
      - test-return-types
      - test-vault-resolution
      - test-error-handling
      - test-security-features
      - test-concurrent-access
      - test-complex-workflows
    if: always()
    steps:
      - name: Generate test summary
        run: |
          echo "# Action Integration Test Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Test Suite | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|------------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Single Secret | ${{ needs.test-single-secret.result == 'success' && '✅ PASS' || '❌ FAIL' }} |" \
            >> $GITHUB_STEP_SUMMARY
          echo "| Multiple Secrets | ${{ needs.test-multiple-secrets.result == 'success' && '✅ PASS' || '❌ FAIL' }} |" \
            >> $GITHUB_STEP_SUMMARY
          echo "| Return Types | ${{ needs.test-return-types.result == 'success' && '✅ PASS' || '❌ FAIL' }} |" \
            >> $GITHUB_STEP_SUMMARY
          echo "| Vault Resolution | ${{ needs.test-vault-resolution.result == 'success' && '✅ PASS' || '❌ FAIL' }} |" \
            >> $GITHUB_STEP_SUMMARY
          echo "| Error Handling | ${{ needs.test-error-handling.result == 'success' && '✅ PASS' || '❌ FAIL' }} |" \
            >> $GITHUB_STEP_SUMMARY
          echo "| Security Features | ${{ needs.test-security-features.result == 'success' && " \
            "'✅ PASS' || '❌ FAIL' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Concurrent Access | ${{ needs.test-concurrent-access.result == 'success' && " \
            "'✅ PASS' || '❌ FAIL' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Complex Workflows | ${{ needs.test-complex-workflows.result == 'success' && " \
            "'✅ PASS' || '❌ FAIL' }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Overall result
          if [ "${{ needs.test-single-secret.result }}" = "success" ] && \
             [ "${{ needs.test-multiple-secrets.result }}" = "success" ] && \
             [ "${{ needs.test-return-types.result }}" = "success" ] && \
             [ "${{ needs.test-vault-resolution.result }}" = "success" ] && \
             [ "${{ needs.test-error-handling.result }}" = "success" ] && \
             [ "${{ needs.test-security-features.result }}" = "success" ] && \
             [ "${{ needs.test-concurrent-access.result }}" = "success" ] && \
             [ "${{ needs.test-complex-workflows.result }}" = "success" ]; then
            echo "## 🎉 All Tests Passed!" >> $GITHUB_STEP_SUMMARY
            echo "The 1Password Secrets Action is working correctly." >> $GITHUB_STEP_SUMMARY
          else
            echo "## ❌ Some Tests Failed" >> $GITHUB_STEP_SUMMARY
            echo "Please check the individual test results above." >> $GITHUB_STEP_SUMMARY
            exit 1
          fi
